// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.1.0.
// **********************************************************************

#ifndef __REGISTRY_H_
#define __REGISTRY_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
#include "tup/TarsJson.h"
using namespace std;
#include "NodeDescriptor.h"
#include "RegistryDescriptor.h"
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"


namespace tars
{
    struct PatchResult : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "tars.PatchResult";
        }
        static string MD5()
        {
            return "c73c13678f156f762d622e8672930c1d";
        }
        PatchResult()
        :sApplication(""),sServerName(""),sNodeName(""),sVersion(""),sUserName("")
        {
        }
        void resetDefautlt()
        {
            sApplication = "";
            sServerName = "";
            sNodeName = "";
            sVersion = "";
            sUserName = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(sApplication, 0);
            _os.write(sServerName, 1);
            _os.write(sNodeName, 2);
            _os.write(sVersion, 3);
            _os.write(sUserName, 4);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(sApplication, 0, true);
            _is.read(sServerName, 1, true);
            _is.read(sNodeName, 2, true);
            _is.read(sVersion, 3, true);
            _is.read(sUserName, 4, true);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["sApplication"] = tars::JsonOutput::writeJson(sApplication);
            p->value["sServerName"] = tars::JsonOutput::writeJson(sServerName);
            p->value["sNodeName"] = tars::JsonOutput::writeJson(sNodeName);
            p->value["sVersion"] = tars::JsonOutput::writeJson(sVersion);
            p->value["sUserName"] = tars::JsonOutput::writeJson(sUserName);
            return p;
        }
        string writeToJsonString()
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(sApplication,pObj->value["sApplication"], true);
            tars::JsonInput::readJson(sServerName,pObj->value["sServerName"], true);
            tars::JsonInput::readJson(sNodeName,pObj->value["sNodeName"], true);
            tars::JsonInput::readJson(sVersion,pObj->value["sVersion"], true);
            tars::JsonInput::readJson(sUserName,pObj->value["sUserName"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(sApplication,"sApplication");
            _ds.display(sServerName,"sServerName");
            _ds.display(sNodeName,"sNodeName");
            _ds.display(sVersion,"sVersion");
            _ds.display(sUserName,"sUserName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(sApplication, true);
            _ds.displaySimple(sServerName, true);
            _ds.displaySimple(sNodeName, true);
            _ds.displaySimple(sVersion, true);
            _ds.displaySimple(sUserName, false);
            return _os;
        }
    public:
        std::string sApplication;
        std::string sServerName;
        std::string sNodeName;
        std::string sVersion;
        std::string sUserName;
    };
    inline bool operator==(const PatchResult&l, const PatchResult&r)
    {
        return l.sApplication == r.sApplication && l.sServerName == r.sServerName && l.sNodeName == r.sNodeName && l.sVersion == r.sVersion && l.sUserName == r.sUserName;
    }
    inline bool operator!=(const PatchResult&l, const PatchResult&r)
    {
        return !(l == r);
    }


    /* callback of async proxy for client */
    class RegistryPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~RegistryPrxCallback(){}
        virtual void callback_destroy(tars::Int32 ret)
        { throw std::runtime_error("callback_destroy() override incorrect."); }
        virtual void callback_destroy_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_destroy_exception() override incorrect."); }

        virtual void callback_getClientIp(tars::Int32 ret,  const std::string& sClientIp)
        { throw std::runtime_error("callback_getClientIp() override incorrect."); }
        virtual void callback_getClientIp_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_getClientIp_exception() override incorrect."); }

        virtual void callback_getNodeTemplate(tars::Int32 ret,  const std::string& profileTemplate)
        { throw std::runtime_error("callback_getNodeTemplate() override incorrect."); }
        virtual void callback_getNodeTemplate_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_getNodeTemplate_exception() override incorrect."); }

        virtual void callback_getServers(const vector<tars::ServerDescriptor>& ret)
        { throw std::runtime_error("callback_getServers() override incorrect."); }
        virtual void callback_getServers_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_getServers_exception() override incorrect."); }

        virtual void callback_keepAlive(tars::Int32 ret)
        { throw std::runtime_error("callback_keepAlive() override incorrect."); }
        virtual void callback_keepAlive_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_keepAlive_exception() override incorrect."); }

        virtual void callback_registerNode(tars::Int32 ret)
        { throw std::runtime_error("callback_registerNode() override incorrect."); }
        virtual void callback_registerNode_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_registerNode_exception() override incorrect."); }

        virtual void callback_reportVersion(tars::Int32 ret)
        { throw std::runtime_error("callback_reportVersion() override incorrect."); }
        virtual void callback_reportVersion_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_reportVersion_exception() override incorrect."); }

        virtual void callback_updatePatchResult(tars::Int32 ret)
        { throw std::runtime_error("callback_updatePatchResult() override incorrect."); }
        virtual void callback_updatePatchResult_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_updatePatchResult_exception() override incorrect."); }

        virtual void callback_updateServer(tars::Int32 ret)
        { throw std::runtime_error("callback_updateServer() override incorrect."); }
        virtual void callback_updateServer_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_updateServer_exception() override incorrect."); }

        virtual void callback_updateServerBatch(tars::Int32 ret)
        { throw std::runtime_error("callback_updateServerBatch() override incorrect."); }
        virtual void callback_updateServerBatch_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_updateServerBatch_exception() override incorrect."); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Registry_all[]=
            {
                "destroy",
                "getClientIp",
                "getNodeTemplate",
                "getServers",
                "keepAlive",
                "registerNode",
                "reportVersion",
                "updatePatchResult",
                "updateServer",
                "updateServerBatch"
            };
            pair<string*, string*> r = equal_range(__Registry_all, __Registry_all+10, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Registry_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_destroy_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_destroy(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getClientIp_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string sClientIp;
                    _is.read(sClientIp, 1, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_getClientIp(_ret, sClientIp);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getNodeTemplate_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    std::string profileTemplate;
                    _is.read(profileTemplate, 2, true);
                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_getNodeTemplate(_ret, profileTemplate);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getServers_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    vector<tars::ServerDescriptor> _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_getServers(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_keepAlive_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_keepAlive(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerNode_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_registerNode(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_reportVersion_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_reportVersion(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updatePatchResult_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_updatePatchResult(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updateServer_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_updateServer(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updateServerBatch_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(msg->response.context);

                    callback_updateServerBatch(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<RegistryPrxCallback> RegistryPrxCallbackPtr;

    /* callback of promise async proxy for client */
    class RegistryPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~RegistryPrxCallbackPromise(){}
    public:
        struct Promisedestroy: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::Promisedestroy > PromisedestroyPtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromisedestroyPtr > &promise)
        : _promise_destroy(promise)
        {}
        
        virtual void callback_destroy(const RegistryPrxCallbackPromise::PromisedestroyPtr &ptr)
        {
            _promise_destroy.setValue(ptr);
        }
        virtual void callback_destroy_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:destroy_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_destroy.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromisedestroyPtr > _promise_destroy;

    public:
        struct PromisegetClientIp: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            std::string sClientIp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisegetClientIp > PromisegetClientIpPtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromisegetClientIpPtr > &promise)
        : _promise_getClientIp(promise)
        {}
        
        virtual void callback_getClientIp(const RegistryPrxCallbackPromise::PromisegetClientIpPtr &ptr)
        {
            _promise_getClientIp.setValue(ptr);
        }
        virtual void callback_getClientIp_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:getClientIp_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getClientIp.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromisegetClientIpPtr > _promise_getClientIp;

    public:
        struct PromisegetNodeTemplate: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            std::string profileTemplate;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisegetNodeTemplate > PromisegetNodeTemplatePtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromisegetNodeTemplatePtr > &promise)
        : _promise_getNodeTemplate(promise)
        {}
        
        virtual void callback_getNodeTemplate(const RegistryPrxCallbackPromise::PromisegetNodeTemplatePtr &ptr)
        {
            _promise_getNodeTemplate.setValue(ptr);
        }
        virtual void callback_getNodeTemplate_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:getNodeTemplate_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getNodeTemplate.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromisegetNodeTemplatePtr > _promise_getNodeTemplate;

    public:
        struct PromisegetServers: virtual public TC_HandleBase
        {
        public:
            vector<tars::ServerDescriptor> _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisegetServers > PromisegetServersPtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromisegetServersPtr > &promise)
        : _promise_getServers(promise)
        {}
        
        virtual void callback_getServers(const RegistryPrxCallbackPromise::PromisegetServersPtr &ptr)
        {
            _promise_getServers.setValue(ptr);
        }
        virtual void callback_getServers_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:getServers_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_getServers.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromisegetServersPtr > _promise_getServers;

    public:
        struct PromisekeepAlive: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisekeepAlive > PromisekeepAlivePtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromisekeepAlivePtr > &promise)
        : _promise_keepAlive(promise)
        {}
        
        virtual void callback_keepAlive(const RegistryPrxCallbackPromise::PromisekeepAlivePtr &ptr)
        {
            _promise_keepAlive.setValue(ptr);
        }
        virtual void callback_keepAlive_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:keepAlive_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_keepAlive.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromisekeepAlivePtr > _promise_keepAlive;

    public:
        struct PromiseregisterNode: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromiseregisterNode > PromiseregisterNodePtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromiseregisterNodePtr > &promise)
        : _promise_registerNode(promise)
        {}
        
        virtual void callback_registerNode(const RegistryPrxCallbackPromise::PromiseregisterNodePtr &ptr)
        {
            _promise_registerNode.setValue(ptr);
        }
        virtual void callback_registerNode_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:registerNode_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_registerNode.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromiseregisterNodePtr > _promise_registerNode;

    public:
        struct PromisereportVersion: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromisereportVersion > PromisereportVersionPtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromisereportVersionPtr > &promise)
        : _promise_reportVersion(promise)
        {}
        
        virtual void callback_reportVersion(const RegistryPrxCallbackPromise::PromisereportVersionPtr &ptr)
        {
            _promise_reportVersion.setValue(ptr);
        }
        virtual void callback_reportVersion_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:reportVersion_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_reportVersion.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromisereportVersionPtr > _promise_reportVersion;

    public:
        struct PromiseupdatePatchResult: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromiseupdatePatchResult > PromiseupdatePatchResultPtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromiseupdatePatchResultPtr > &promise)
        : _promise_updatePatchResult(promise)
        {}
        
        virtual void callback_updatePatchResult(const RegistryPrxCallbackPromise::PromiseupdatePatchResultPtr &ptr)
        {
            _promise_updatePatchResult.setValue(ptr);
        }
        virtual void callback_updatePatchResult_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:updatePatchResult_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_updatePatchResult.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromiseupdatePatchResultPtr > _promise_updatePatchResult;

    public:
        struct PromiseupdateServer: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromiseupdateServer > PromiseupdateServerPtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromiseupdateServerPtr > &promise)
        : _promise_updateServer(promise)
        {}
        
        virtual void callback_updateServer(const RegistryPrxCallbackPromise::PromiseupdateServerPtr &ptr)
        {
            _promise_updateServer.setValue(ptr);
        }
        virtual void callback_updateServer_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:updateServer_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_updateServer.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromiseupdateServerPtr > _promise_updateServer;

    public:
        struct PromiseupdateServerBatch: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< RegistryPrxCallbackPromise::PromiseupdateServerBatch > PromiseupdateServerBatchPtr;

        RegistryPrxCallbackPromise(const promise::Promise< RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr > &promise)
        : _promise_updateServerBatch(promise)
        {}
        
        virtual void callback_updateServerBatch(const RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr &ptr)
        {
            _promise_updateServerBatch.setValue(ptr);
        }
        virtual void callback_updateServerBatch_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:updateServerBatch_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_updateServerBatch.setException(promise::copyException(str, ret));
        }

    protected:
        promise::Promise< RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr > _promise_updateServerBatch;

    public:
        virtual int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Registry_all[]=
            {
                "destroy",
                "getClientIp",
                "getNodeTemplate",
                "getServers",
                "keepAlive",
                "registerNode",
                "reportVersion",
                "updatePatchResult",
                "updateServer",
                "updateServerBatch"
            };

            pair<string*, string*> r = equal_range(__Registry_all, __Registry_all+10, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Registry_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_destroy_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromisedestroyPtr ptr = new RegistryPrxCallbackPromise::Promisedestroy();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_destroy_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_destroy_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_destroy(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getClientIp_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromisegetClientIpPtr ptr = new RegistryPrxCallbackPromise::PromisegetClientIp();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->sClientIp, 1, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_getClientIp_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getClientIp_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_getClientIp(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getNodeTemplate_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromisegetNodeTemplatePtr ptr = new RegistryPrxCallbackPromise::PromisegetNodeTemplate();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->profileTemplate, 2, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_getNodeTemplate_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getNodeTemplate_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_getNodeTemplate(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getServers_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromisegetServersPtr ptr = new RegistryPrxCallbackPromise::PromisegetServers();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getServers_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getServers_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_getServers(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_keepAlive_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromisekeepAlivePtr ptr = new RegistryPrxCallbackPromise::PromisekeepAlive();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_keepAlive_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_keepAlive_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_keepAlive(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerNode_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromiseregisterNodePtr ptr = new RegistryPrxCallbackPromise::PromiseregisterNode();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_registerNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_registerNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_registerNode(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_reportVersion_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromisereportVersionPtr ptr = new RegistryPrxCallbackPromise::PromisereportVersion();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_reportVersion_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_reportVersion_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_reportVersion(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updatePatchResult_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromiseupdatePatchResultPtr ptr = new RegistryPrxCallbackPromise::PromiseupdatePatchResult();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updatePatchResult_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updatePatchResult_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_updatePatchResult(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updateServer_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromiseupdateServerPtr ptr = new RegistryPrxCallbackPromise::PromiseupdateServer();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updateServer_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updateServer_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_updateServer(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updateServerBatch_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);

                    RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr ptr = new RegistryPrxCallbackPromise::PromiseupdateServerBatch();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updateServerBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updateServerBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = msg->response.context;

                    callback_updateServerBatch(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<RegistryPrxCallbackPromise> RegistryPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class RegistryCoroPrxCallback: public RegistryPrxCallback
    {
    public:
        virtual ~RegistryCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr msg)
        {
            static ::std::string __Registry_all[]=
            {
                "destroy",
                "getClientIp",
                "getNodeTemplate",
                "getServers",
                "keepAlive",
                "registerNode",
                "reportVersion",
                "updatePatchResult",
                "updateServer",
                "updateServerBatch"
            };

            pair<string*, string*> r = equal_range(__Registry_all, __Registry_all+10, string(msg->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Registry_all)
            {
                case 0:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_destroy_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_destroy(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_destroy_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_destroy_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getClientIp_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string sClientIp;
                        _is.read(sClientIp, 1, true);
                        setResponseContext(msg->response.context);

                        callback_getClientIp(_ret, sClientIp);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getClientIp_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getClientIp_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getNodeTemplate_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        std::string profileTemplate;
                        _is.read(profileTemplate, 2, true);
                        setResponseContext(msg->response.context);

                        callback_getNodeTemplate(_ret, profileTemplate);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getNodeTemplate_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getNodeTemplate_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_getServers_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        vector<tars::ServerDescriptor> _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_getServers(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_getServers_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_getServers_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_keepAlive_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_keepAlive(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_keepAlive_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_keepAlive_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_registerNode_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_registerNode(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_registerNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_registerNode_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_reportVersion_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_reportVersion(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_reportVersion_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_reportVersion_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updatePatchResult_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_updatePatchResult(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updatePatchResult_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updatePatchResult_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updateServer_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_updateServer(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updateServer_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updateServer_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    if (msg->response.iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_updateServerBatch_exception(msg->response.iRet);

                        return msg->response.iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(msg->response.sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(msg->response.context);

                        callback_updateServerBatch(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_updateServerBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_updateServerBatch_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<RegistryCoroPrxCallback> RegistryCoroPrxCallbackPtr;

    /* proxy for client */
    class RegistryProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        tars::Int32 destroy(const std::string & nodeName,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"destroy", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_destroy(RegistryPrxCallbackPtr callback,const std::string &nodeName,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"destroy", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromisedestroyPtr > promise_async_destroy(const std::string &nodeName,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromisedestroyPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"destroy", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_destroy(RegistryCoroPrxCallbackPtr callback,const std::string &nodeName,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"destroy", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 getClientIp(std::string &sClientIp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(sClientIp, 1);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"getClientIp", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(sClientIp, 1, true);
            return _ret;
        }

        void async_getClientIp(RegistryPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getClientIp", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromisegetClientIpPtr > promise_async_getClientIp(const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromisegetClientIpPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getClientIp", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getClientIp(RegistryCoroPrxCallbackPtr callback,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getClientIp", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 getNodeTemplate(const std::string & nodeName,std::string &profileTemplate,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            _os.write(profileTemplate, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"getNodeTemplate", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(profileTemplate, 2, true);
            return _ret;
        }

        void async_getNodeTemplate(RegistryPrxCallbackPtr callback,const std::string &nodeName,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getNodeTemplate", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromisegetNodeTemplatePtr > promise_async_getNodeTemplate(const std::string &nodeName,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromisegetNodeTemplatePtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getNodeTemplate", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getNodeTemplate(RegistryCoroPrxCallbackPtr callback,const std::string &nodeName,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getNodeTemplate", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        vector<tars::ServerDescriptor> getServers(const std::string & app,const std::string & serverName,const std::string & nodeName,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"getServers", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            vector<tars::ServerDescriptor> _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_getServers(RegistryPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &nodeName,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getServers", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromisegetServersPtr > promise_async_getServers(const std::string &app,const std::string &serverName,const std::string &nodeName,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromisegetServersPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getServers", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_getServers(RegistryCoroPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &nodeName,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"getServers", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 keepAlive(const std::string & nodeName,const tars::LoadInfo & load,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            _os.write(load, 2);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"keepAlive", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_keepAlive(RegistryPrxCallbackPtr callback,const std::string &nodeName,const tars::LoadInfo &load,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            _os.write(load, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"keepAlive", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromisekeepAlivePtr > promise_async_keepAlive(const std::string &nodeName,const tars::LoadInfo &load,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromisekeepAlivePtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            _os.write(load, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"keepAlive", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_keepAlive(RegistryCoroPrxCallbackPtr callback,const std::string &nodeName,const tars::LoadInfo &load,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            _os.write(load, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"keepAlive", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 registerNode(const std::string & nodeName,const tars::NodeInfo & ni,const tars::LoadInfo & li,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            _os.write(ni, 2);
            _os.write(li, 3);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"registerNode", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_registerNode(RegistryPrxCallbackPtr callback,const std::string &nodeName,const tars::NodeInfo &ni,const tars::LoadInfo &li,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            _os.write(ni, 2);
            _os.write(li, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"registerNode", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromiseregisterNodePtr > promise_async_registerNode(const std::string &nodeName,const tars::NodeInfo &ni,const tars::LoadInfo &li,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromiseregisterNodePtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            _os.write(ni, 2);
            _os.write(li, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"registerNode", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_registerNode(RegistryCoroPrxCallbackPtr callback,const std::string &nodeName,const tars::NodeInfo &ni,const tars::LoadInfo &li,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(nodeName, 1);
            _os.write(ni, 2);
            _os.write(li, 3);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"registerNode", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 reportVersion(const std::string & app,const std::string & serverName,const std::string & nodeName,const std::string & version,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(version, 4);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"reportVersion", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_reportVersion(RegistryPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &nodeName,const std::string &version,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(version, 4);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"reportVersion", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromisereportVersionPtr > promise_async_reportVersion(const std::string &app,const std::string &serverName,const std::string &nodeName,const std::string &version,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromisereportVersionPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(version, 4);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"reportVersion", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_reportVersion(RegistryCoroPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &nodeName,const std::string &version,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(version, 4);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"reportVersion", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 updatePatchResult(const tars::PatchResult & result,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(result, 1);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"updatePatchResult", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_updatePatchResult(RegistryPrxCallbackPtr callback,const tars::PatchResult &result,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(result, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updatePatchResult", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromiseupdatePatchResultPtr > promise_async_updatePatchResult(const tars::PatchResult &result,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromiseupdatePatchResultPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(result, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updatePatchResult", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_updatePatchResult(RegistryCoroPrxCallbackPtr callback,const tars::PatchResult &result,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(result, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updatePatchResult", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 updateServer(const std::string & app,const std::string & serverName,const std::string & nodeName,const tars::ServerStateInfo & state,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(state, 4);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"updateServer", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_updateServer(RegistryPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &nodeName,const tars::ServerStateInfo &state,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(state, 4);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updateServer", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromiseupdateServerPtr > promise_async_updateServer(const std::string &app,const std::string &serverName,const std::string &nodeName,const tars::ServerStateInfo &state,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromiseupdateServerPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(state, 4);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updateServer", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_updateServer(RegistryCoroPrxCallbackPtr callback,const std::string &app,const std::string &serverName,const std::string &nodeName,const tars::ServerStateInfo &state,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(app, 1);
            _os.write(serverName, 2);
            _os.write(nodeName, 3);
            _os.write(state, 4);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updateServer", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        tars::Int32 updateServerBatch(const vector<tars::ServerStateInfo> & vState,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(vState, 1);
            tars::ResponsePacket rep;
            std::map<string, string> _mStatus;
            tars_invoke(tars::TARSNORMAL,"updateServerBatch", _os.getByteBuffer(), context, _mStatus, rep);
            if(pResponseContext)
            {
                *pResponseContext = rep.context;
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep.sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            return _ret;
        }

        void async_updateServerBatch(RegistryPrxCallbackPtr callback,const vector<tars::ServerStateInfo> &vState,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(vState, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updateServerBatch", _os.getByteBuffer(), context, _mStatus, callback);
        }
        
        promise::Future< RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr > promise_async_updateServerBatch(const vector<tars::ServerStateInfo> &vState,const map<string, string>& context)
        {
            promise::Promise< RegistryPrxCallbackPromise::PromiseupdateServerBatchPtr > promise;
            RegistryPrxCallbackPromisePtr callback = new RegistryPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(vState, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updateServerBatch", _os.getByteBuffer(), context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_updateServerBatch(RegistryCoroPrxCallbackPtr callback,const vector<tars::ServerStateInfo> &vState,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriter> _os;
            _os.write(vState, 1);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"updateServerBatch", _os.getByteBuffer(), context, _mStatus, callback, true);
        }

        RegistryProxy* tars_hash(int64_t key)
        {
            return (RegistryProxy*)ServantProxy::tars_hash(key);
        }

        RegistryProxy* tars_consistent_hash(int64_t key)
        {
            return (RegistryProxy*)ServantProxy::tars_consistent_hash(key);
        }

        RegistryProxy* tars_set_timeout(int msecond)
        {
            return (RegistryProxy*)ServantProxy::tars_set_timeout(msecond);
        }

    };
    typedef tars::TC_AutoPtr<RegistryProxy> RegistryPrx;

    /* servant for server */
    class Registry : public tars::Servant
    {
    public:
        virtual ~Registry(){}
        virtual tars::Int32 destroy(const std::string & nodeName,tars::TarsCurrentPtr current) = 0;
        static void async_response_destroy(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 getClientIp(std::string &sClientIp,tars::TarsCurrentPtr current) = 0;
        static void async_response_getClientIp(tars::TarsCurrentPtr current, tars::Int32 _ret, const std::string &sClientIp)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("sClientIp", sClientIp);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(sClientIp, 1);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 getNodeTemplate(const std::string & nodeName,std::string &profileTemplate,tars::TarsCurrentPtr current) = 0;
        static void async_response_getNodeTemplate(tars::TarsCurrentPtr current, tars::Int32 _ret, const std::string &profileTemplate)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);
                tarsAttr.put("profileTemplate", profileTemplate);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                _os.write(profileTemplate, 2);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual vector<tars::ServerDescriptor> getServers(const std::string & app,const std::string & serverName,const std::string & nodeName,tars::TarsCurrentPtr current) = 0;
        static void async_response_getServers(tars::TarsCurrentPtr current, const vector<tars::ServerDescriptor> &_ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 keepAlive(const std::string & nodeName,const tars::LoadInfo & load,tars::TarsCurrentPtr current) = 0;
        static void async_response_keepAlive(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 registerNode(const std::string & nodeName,const tars::NodeInfo & ni,const tars::LoadInfo & li,tars::TarsCurrentPtr current) = 0;
        static void async_response_registerNode(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 reportVersion(const std::string & app,const std::string & serverName,const std::string & nodeName,const std::string & version,tars::TarsCurrentPtr current) = 0;
        static void async_response_reportVersion(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 updatePatchResult(const tars::PatchResult & result,tars::TarsCurrentPtr current) = 0;
        static void async_response_updatePatchResult(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 updateServer(const std::string & app,const std::string & serverName,const std::string & nodeName,const tars::ServerStateInfo & state,tars::TarsCurrentPtr current) = 0;
        static void async_response_updateServer(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

        virtual tars::Int32 updateServerBatch(const vector<tars::ServerStateInfo> & vState,tars::TarsCurrentPtr current) = 0;
        static void async_response_updateServerBatch(tars::TarsCurrentPtr current, tars::Int32 _ret)
        {
            if (current->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                tarsAttr.setVersion(current->getRequestVersion());
                tarsAttr.put("", _ret);

                vector<char> sTupResponseBuffer;
                tarsAttr.encode(sTupResponseBuffer);
                current->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriter> _os;
                _os.write(_ret, 0);

                current->sendResponse(tars::TARSSERVERSUCCESS, _os.getByteBuffer());
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __tars__Registry_all[]=
            {
                "destroy",
                "getClientIp",
                "getNodeTemplate",
                "getServers",
                "keepAlive",
                "registerNode",
                "reportVersion",
                "updatePatchResult",
                "updateServer",
                "updateServerBatch"
            };

            pair<string*, string*> r = equal_range(__tars__Registry_all, __tars__Registry_all+10, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __tars__Registry_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string nodeName;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("nodeName", nodeName);
                    }
                    else
                    {
                        _is.read(nodeName, 1, true);
                    }
                    tars::Int32 _ret = destroy(nodeName, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string sClientIp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.getByDefault("sClientIp", sClientIp, sClientIp);
                    }
                    else
                    {
                        _is.read(sClientIp, 1, false);
                    }
                    tars::Int32 _ret = getClientIp(sClientIp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("sClientIp", sClientIp);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(sClientIp, 1);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string nodeName;
                    std::string profileTemplate;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("nodeName", nodeName);
                        tarsAttr.getByDefault("profileTemplate", profileTemplate, profileTemplate);
                    }
                    else
                    {
                        _is.read(nodeName, 1, true);
                        _is.read(profileTemplate, 2, false);
                    }
                    tars::Int32 _ret = getNodeTemplate(nodeName,profileTemplate, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.put("profileTemplate", profileTemplate);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.write(profileTemplate, 2);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 3:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string app;
                    std::string serverName;
                    std::string nodeName;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("app", app);
                        tarsAttr.get("serverName", serverName);
                        tarsAttr.get("nodeName", nodeName);
                    }
                    else
                    {
                        _is.read(app, 1, true);
                        _is.read(serverName, 2, true);
                        _is.read(nodeName, 3, true);
                    }
                    vector<tars::ServerDescriptor> _ret = getServers(app,serverName,nodeName, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 4:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string nodeName;
                    tars::LoadInfo load;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("nodeName", nodeName);
                        tarsAttr.get("load", load);
                    }
                    else
                    {
                        _is.read(nodeName, 1, true);
                        _is.read(load, 2, true);
                    }
                    tars::Int32 _ret = keepAlive(nodeName,load, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 5:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string nodeName;
                    tars::NodeInfo ni;
                    tars::LoadInfo li;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("nodeName", nodeName);
                        tarsAttr.get("ni", ni);
                        tarsAttr.get("li", li);
                    }
                    else
                    {
                        _is.read(nodeName, 1, true);
                        _is.read(ni, 2, true);
                        _is.read(li, 3, true);
                    }
                    tars::Int32 _ret = registerNode(nodeName,ni,li, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 6:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string app;
                    std::string serverName;
                    std::string nodeName;
                    std::string version;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("app", app);
                        tarsAttr.get("serverName", serverName);
                        tarsAttr.get("nodeName", nodeName);
                        tarsAttr.get("version", version);
                    }
                    else
                    {
                        _is.read(app, 1, true);
                        _is.read(serverName, 2, true);
                        _is.read(nodeName, 3, true);
                        _is.read(version, 4, true);
                    }
                    tars::Int32 _ret = reportVersion(app,serverName,nodeName,version, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 7:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    tars::PatchResult result;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("result", result);
                    }
                    else
                    {
                        _is.read(result, 1, true);
                    }
                    tars::Int32 _ret = updatePatchResult(result, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 8:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    std::string app;
                    std::string serverName;
                    std::string nodeName;
                    tars::ServerStateInfo state;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("app", app);
                        tarsAttr.get("serverName", serverName);
                        tarsAttr.get("nodeName", nodeName);
                        tarsAttr.get("state", state);
                    }
                    else
                    {
                        _is.read(app, 1, true);
                        _is.read(serverName, 2, true);
                        _is.read(nodeName, 3, true);
                        _is.read(state, 4, true);
                    }
                    tars::Int32 _ret = updateServer(app,serverName,nodeName,state, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
                case 9:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    vector<tars::ServerStateInfo> vState;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                        tarsAttr.setVersion(_current->getRequestVersion());
                        tarsAttr.decode(_current->getRequestBuffer());
                        tarsAttr.get("vState", vState);
                    }
                    else
                    {
                        _is.read(vState, 1, true);
                    }
                    tars::Int32 _ret = updateServerBatch(vState, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION )
                        {
                            UniAttribute<tars::BufferWriter, tars::BufferReader>  tarsAttr;
                            tarsAttr.setVersion(_current->getRequestVersion());
                            tarsAttr.put("", _ret);
                            tarsAttr.encode(_sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriter> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                    }
                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
